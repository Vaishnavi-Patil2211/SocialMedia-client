import React, { Component, ReactNode } from 'react';
import PropTypes from 'prop-types';
interface Props {
    position: 'left' | 'right' | 'top' | 'bottom';
    zIndex: number;
    fluid: boolean;
    size?: number;
    defaultSize: number;
    dimMode: 'none' | 'transparent' | 'opaque';
    isVisible?: boolean;
    onVisibleChange?: (isVisible: boolean) => void;
    onSizeChange?: (size: number) => void;
    dimStyle?: React.CSSProperties | null;
    dockStyle?: React.CSSProperties | null;
    dockHiddenStyle?: React.CSSProperties | null;
    duration: number;
    children?: React.FunctionComponent<{
        position: 'left' | 'right' | 'top' | 'bottom';
        isResizing: boolean | undefined;
        size: number;
        isVisible: boolean | undefined;
    }> | ReactNode;
}
interface State {
    isControlled: boolean;
    size: number;
    isDimHidden: boolean;
    fullWidth: number;
    fullHeight: number;
    isTransitionStarted: boolean;
    isWindowResizing: unknown;
    isResizing?: boolean;
}
export default class Dock extends Component<Props, State> {
    state: State;
    static propTypes: {
        position: PropTypes.Requireable<string>;
        zIndex: PropTypes.Requireable<number>;
        fluid: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<number>;
        defaultSize: PropTypes.Requireable<number>;
        dimMode: PropTypes.Requireable<string>;
        isVisible: PropTypes.Requireable<boolean>;
        onVisibleChange: PropTypes.Requireable<(...args: any[]) => any>;
        onSizeChange: PropTypes.Requireable<(...args: any[]) => any>;
        dimStyle: PropTypes.Requireable<object>;
        dockStyle: PropTypes.Requireable<object>;
        duration: PropTypes.Requireable<number>;
    };
    static defaultProps: {
        position: string;
        zIndex: number;
        fluid: boolean;
        defaultSize: number;
        dimMode: string;
        duration: number;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    updateSize(props: Props): void;
    componentDidUpdate(prevProps: Props): void;
    transitionEnd: () => void;
    hideDim: () => void;
    render(): JSX.Element;
    handleDimClick: () => void;
    handleResize: () => void;
    updateWindowSize: (windowResize?: true | undefined) => void;
    updateWindowSizeEnd: () => void;
    debouncedUpdateWindowSizeEnd: (() => void) & import("lodash").Cancelable;
    handleWrapperLeave: () => void;
    handleMouseDown: () => void;
    handleMouseUp: () => void;
    handleMouseMove: (e: MouseEvent | TouchEvent) => void;
}
export {};
