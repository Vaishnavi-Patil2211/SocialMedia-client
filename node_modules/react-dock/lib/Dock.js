"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _autoprefix = _interopRequireDefault(require("./autoprefix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

(function () {
  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;
  enterModule && enterModule(module);
})();

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal["default"].signature : function (a) {
  return a;
};

function autoprefixes(styles) {
  return Object.keys(styles).reduce(function (obj, key) {
    return obj[key] = (0, _autoprefix["default"])(styles[key]), obj;
  }, {});
}

var styles = autoprefixes({
  wrapper: {
    position: 'fixed',
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  dim: {
    position: 'fixed',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    zIndex: 0,
    background: 'rgba(0, 0, 0, 0.2)',
    opacity: 1
  },
  dimAppear: {
    opacity: 0
  },
  dimTransparent: {
    pointerEvents: 'none'
  },
  dimHidden: {
    opacity: 0
  },
  dock: {
    position: 'fixed',
    zIndex: 1,
    boxShadow: '0 0 4px rgba(0, 0, 0, 0.3)',
    background: 'white',
    left: 0,
    top: 0,
    width: '100%',
    height: '100%'
  },
  dockHidden: {
    opacity: 0
  },
  dockResizing: {
    transition: 'none'
  },
  dockContent: {
    width: '100%',
    height: '100%',
    overflow: 'auto'
  },
  resizer: {
    position: 'absolute',
    zIndex: 2,
    opacity: 0
  }
});

function getTransitions(duration) {
  return ['left', 'top', 'width', 'height'].map(function (p) {
    return "".concat(p, " ").concat(duration / 1000, "s ease-out");
  });
}

function getDockStyles(_ref, _ref2) {
  var fluid = _ref.fluid,
      dockStyle = _ref.dockStyle,
      dockHiddenStyle = _ref.dockHiddenStyle,
      duration = _ref.duration,
      position = _ref.position,
      isVisible = _ref.isVisible;
  var size = _ref2.size,
      isResizing = _ref2.isResizing,
      fullWidth = _ref2.fullWidth,
      fullHeight = _ref2.fullHeight;
  var posStyle;
  var absSize = fluid ? "".concat(size * 100, "%") : "".concat(size, "px");

  function getRestSize(fullSize) {
    return fluid ? "".concat(100 - size * 100, "%") : "".concat(fullSize - size, "px");
  }

  switch (position) {
    case 'left':
      posStyle = {
        width: absSize,
        left: isVisible ? 0 : '-' + absSize
      };
      break;

    case 'right':
      posStyle = {
        left: isVisible ? getRestSize(fullWidth) : fullWidth,
        width: absSize
      };
      break;

    case 'top':
      posStyle = {
        top: isVisible ? 0 : '-' + absSize,
        height: absSize
      };
      break;

    case 'bottom':
      posStyle = {
        top: isVisible ? getRestSize(fullHeight) : fullHeight,
        height: absSize
      };
      break;
  }

  var transitions = getTransitions(duration);
  return [styles.dock, (0, _autoprefix["default"])({
    transition: [].concat(_toConsumableArray(transitions), [!isVisible && "opacity 0.01s linear ".concat(duration / 1000, "s")]).filter(function (t) {
      return t;
    }).join(',')
  }), dockStyle, (0, _autoprefix["default"])(posStyle), isResizing && styles.dockResizing, !isVisible && styles.dockHidden, !isVisible && dockHiddenStyle];
}

function getDimStyles(_ref3, _ref4) {
  var dimMode = _ref3.dimMode,
      dimStyle = _ref3.dimStyle,
      duration = _ref3.duration,
      isVisible = _ref3.isVisible;
  var isTransitionStarted = _ref4.isTransitionStarted;
  return [styles.dim, (0, _autoprefix["default"])({
    transition: "opacity ".concat(duration / 1000, "s ease-out")
  }), dimStyle, dimMode === 'transparent' && styles.dimTransparent, !isVisible && styles.dimHidden, isTransitionStarted && isVisible && styles.dimAppear, isTransitionStarted && !isVisible && styles.dimDisappear];
}

function getResizerStyles(position) {
  var resizerStyle;
  var size = 10;

  switch (position) {
    case 'left':
      resizerStyle = {
        right: -size / 2,
        width: size,
        top: 0,
        height: '100%',
        cursor: 'col-resize'
      };
      break;

    case 'right':
      resizerStyle = {
        left: -size / 2,
        width: size,
        top: 0,
        height: '100%',
        cursor: 'col-resize'
      };
      break;

    case 'top':
      resizerStyle = {
        bottom: -size / 2,
        height: size,
        left: 0,
        width: '100%',
        cursor: 'row-resize'
      };
      break;

    case 'bottom':
      resizerStyle = {
        top: -size / 2,
        height: size,
        left: 0,
        width: '100%',
        cursor: 'row-resize'
      };
      break;
  }

  return [styles.resizer, (0, _autoprefix["default"])(resizerStyle)];
}

function getFullSize(position, fullWidth, fullHeight) {
  return position === 'left' || position === 'right' ? fullWidth : fullHeight;
}

var Dock = /*#__PURE__*/function (_Component) {
  _inherits(Dock, _Component);

  var _super = _createSuper(Dock);

  function Dock() {
    var _this;

    _classCallCheck(this, Dock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isControlled: typeof _this.props.size !== 'undefined',
      size: _this.props.size || _this.props.defaultSize,
      isDimHidden: !_this.props.isVisible,
      fullWidth: window.innerWidth,
      fullHeight: window.innerHeight,
      isTransitionStarted: false,
      isWindowResizing: false
    });

    _defineProperty(_assertThisInitialized(_this), "transitionEnd", function () {
      _this.setState({
        isTransitionStarted: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideDim", function () {
      if (!_this.props.isVisible) {
        _this.setState({
          isDimHidden: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleDimClick", function () {
      if (_this.props.dimMode === 'opaque') {
        _this.props.onVisibleChange && _this.props.onVisibleChange(false);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleResize", function () {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(_this.updateWindowSize.bind(_assertThisInitialized(_this), true));
      } else {
        _this.updateWindowSize(true);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "updateWindowSize", function (windowResize) {
      var sizeState = {
        fullWidth: window.innerWidth,
        fullHeight: window.innerHeight
      };

      if (windowResize) {
        _this.setState(_objectSpread(_objectSpread({}, sizeState), {}, {
          isResizing: true,
          isWindowResizing: windowResize
        }));

        _this.debouncedUpdateWindowSizeEnd();
      } else {
        _this.setState(sizeState);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "updateWindowSizeEnd", function () {
      _this.setState({
        isResizing: false,
        isWindowResizing: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "debouncedUpdateWindowSizeEnd", (0, _lodash["default"])(_this.updateWindowSizeEnd, 30));

    _defineProperty(_assertThisInitialized(_this), "handleWrapperLeave", function () {
      _this.setState({
        isResizing: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function () {
      _this.setState({
        isResizing: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function () {
      _this.setState({
        isResizing: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (e) {
      if (!_this.state.isResizing || _this.state.isWindowResizing) return;
      if (!e.touches) e.preventDefault();
      var _this$props = _this.props,
          position = _this$props.position,
          fluid = _this$props.fluid;
      var _this$state = _this.state,
          fullWidth = _this$state.fullWidth,
          fullHeight = _this$state.fullHeight,
          isControlled = _this$state.isControlled;
      var _ref5 = e,
          x = _ref5.clientX,
          y = _ref5.clientY;

      if (e.touches) {
        x = e.touches[0].clientX;
        y = e.touches[0].clientY;
      }

      var size;

      switch (position) {
        case 'left':
          size = fluid ? x / fullWidth : x;
          break;

        case 'right':
          size = fluid ? (fullWidth - x) / fullWidth : fullWidth - x;
          break;

        case 'top':
          size = fluid ? y / fullHeight : y;
          break;

        case 'bottom':
          size = fluid ? (fullHeight - y) / fullHeight : fullHeight - y;
          break;
      }

      _this.props.onSizeChange && _this.props.onSizeChange(size);

      if (!isControlled) {
        _this.setState({
          size: size
        });
      }
    });

    return _this;
  }

  _createClass(Dock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('touchend', this.handleMouseUp);
      window.addEventListener('mouseup', this.handleMouseUp);
      window.addEventListener('touchmove', this.handleMouseMove);
      window.addEventListener('mousemove', this.handleMouseMove);
      window.addEventListener('resize', this.handleResize);
      this.updateWindowSize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('touchend', this.handleMouseUp);
      window.removeEventListener('mouseup', this.handleMouseUp);
      window.removeEventListener('touchmove', this.handleMouseMove);
      window.removeEventListener('mousemove', this.handleMouseMove);
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var isControlled = typeof nextProps.size !== 'undefined';
      this.setState({
        isControlled: isControlled
      });

      if (isControlled && nextProps.size && this.props.size !== nextProps.size) {
        this.setState({
          size: nextProps.size
        });
      } else if (this.props.fluid !== nextProps.fluid) {
        this.updateSize(nextProps);
      }

      if (this.props.isVisible !== nextProps.isVisible) {
        this.setState({
          isTransitionStarted: true
        });
      }
    }
  }, {
    key: "updateSize",
    value: function updateSize(props) {
      var _this$state2 = this.state,
          fullWidth = _this$state2.fullWidth,
          fullHeight = _this$state2.fullHeight;
      this.setState({
        size: props.fluid ? this.state.size / getFullSize(props.position, fullWidth, fullHeight) : getFullSize(props.position, fullWidth, fullHeight) * this.state.size
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (this.props.isVisible !== prevProps.isVisible) {
        if (!this.props.isVisible) {
          window.setTimeout(function () {
            return _this2.hideDim();
          }, this.props.duration);
        } else {
          this.setState({
            isDimHidden: false
          });
        }

        window.setTimeout(function () {
          return _this2.setState({
            isTransitionStarted: false
          });
        }, 0);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          zIndex = _this$props2.zIndex,
          dimMode = _this$props2.dimMode,
          position = _this$props2.position,
          isVisible = _this$props2.isVisible;
      var _this$state3 = this.state,
          isResizing = _this$state3.isResizing,
          size = _this$state3.size,
          isDimHidden = _this$state3.isDimHidden;
      var dimStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(getDimStyles(this.props, this.state))));
      var dockStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(getDockStyles(this.props, this.state))));
      var resizerStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(getResizerStyles(position))));
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: Object.assign({}, styles.wrapper, {
          zIndex: zIndex
        })
      }, dimMode !== 'none' && !isDimHidden && /*#__PURE__*/_react["default"].createElement("div", {
        style: dimStyles,
        onClick: this.handleDimClick
      }), /*#__PURE__*/_react["default"].createElement("div", {
        style: dockStyles
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: resizerStyles,
        onMouseDown: this.handleMouseDown,
        onTouchStart: this.handleMouseDown
      }), /*#__PURE__*/_react["default"].createElement("div", {
        style: styles.dockContent
      }, typeof children === 'function' ? children({
        position: position,
        isResizing: isResizing,
        size: size,
        isVisible: isVisible
      }) : children)));
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return Dock;
}(_react.Component);

exports["default"] = Dock;

_defineProperty(Dock, "propTypes", {
  position: _propTypes["default"].oneOf(['left', 'right', 'top', 'bottom']),
  zIndex: _propTypes["default"].number,
  fluid: _propTypes["default"].bool,
  size: _propTypes["default"].number,
  defaultSize: _propTypes["default"].number,
  dimMode: _propTypes["default"].oneOf(['none', 'transparent', 'opaque']),
  isVisible: _propTypes["default"].bool,
  onVisibleChange: _propTypes["default"].func,
  onSizeChange: _propTypes["default"].func,
  dimStyle: _propTypes["default"].object,
  dockStyle: _propTypes["default"].object,
  duration: _propTypes["default"].number
});

_defineProperty(Dock, "defaultProps", {
  position: 'left',
  zIndex: 99999999,
  fluid: true,
  defaultSize: 0.3,
  dimMode: 'opaque',
  duration: 200
});

;

(function () {
  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(autoprefixes, "autoprefixes", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(styles, "styles", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(getTransitions, "getTransitions", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(getDockStyles, "getDockStyles", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(getDimStyles, "getDimStyles", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(getResizerStyles, "getResizerStyles", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(getFullSize, "getFullSize", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
  reactHotLoader.register(Dock, "Dock", "C:\\Users\\Nathan\\Documents\\redux-devtools\\packages\\react-dock\\src\\Dock.tsx");
})();

;

(function () {
  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;
  leaveModule && leaveModule(module);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,