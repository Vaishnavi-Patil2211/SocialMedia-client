"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var JSONArrow = function JSONArrow(_ref) {
  var styling = _ref.styling,
      arrowStyle = _ref.arrowStyle,
      expanded = _ref.expanded,
      nodeType = _ref.nodeType,
      onClick = _ref.onClick;
  return /*#__PURE__*/_react["default"].createElement("div", _extends({}, styling('arrowContainer', arrowStyle), {
    onClick: onClick
  }), /*#__PURE__*/_react["default"].createElement("div", styling(['arrow', 'arrowSign'], nodeType, expanded, arrowStyle), "\u25B6", arrowStyle === 'double' && /*#__PURE__*/_react["default"].createElement("div", styling(['arrowSign', 'arrowSignInner']), "\u25B6")));
};

JSONArrow.propTypes = {
  styling: _propTypes["default"].func.isRequired,
  arrowStyle: _propTypes["default"].oneOf(['single', 'double']),
  expanded: _propTypes["default"].bool.isRequired,
  nodeType: _propTypes["default"].string.isRequired,
  onClick: _propTypes["default"].func.isRequired
};
JSONArrow.defaultProps = {
  arrowStyle: 'single'
};
var _default = JSONArrow;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9KU09OQXJyb3cudHN4Il0sIm5hbWVzIjpbIkpTT05BcnJvdyIsInN0eWxpbmciLCJhcnJvd1N0eWxlIiwiZXhwYW5kZWQiLCJub2RlVHlwZSIsIm9uQ2xpY2siLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsInN0cmluZyIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7QUFXQSxJQUFNQSxTQUF5QyxHQUFHLFNBQTVDQSxTQUE0QztBQUFBLE1BQ2hEQyxPQURnRCxRQUNoREEsT0FEZ0Q7QUFBQSxNQUVoREMsVUFGZ0QsUUFFaERBLFVBRmdEO0FBQUEsTUFHaERDLFFBSGdELFFBR2hEQSxRQUhnRDtBQUFBLE1BSWhEQyxRQUpnRCxRQUloREEsUUFKZ0Q7QUFBQSxNQUtoREMsT0FMZ0QsUUFLaERBLE9BTGdEO0FBQUEsc0JBT2hELG9EQUFTSixPQUFPLENBQUMsZ0JBQUQsRUFBbUJDLFVBQW5CLENBQWhCO0FBQWdELElBQUEsT0FBTyxFQUFFRztBQUF6RCxtQkFDRSx1Q0FBU0osT0FBTyxDQUFDLENBQUMsT0FBRCxFQUFVLFdBQVYsQ0FBRCxFQUF5QkcsUUFBekIsRUFBbUNELFFBQW5DLEVBQTZDRCxVQUE3QyxDQUFoQixFQUNHLFFBREgsRUFFR0EsVUFBVSxLQUFLLFFBQWYsaUJBQ0MsdUNBQVNELE9BQU8sQ0FBQyxDQUFDLFdBQUQsRUFBYyxnQkFBZCxDQUFELENBQWhCLEVBQW9ELFFBQXBELENBSEosQ0FERixDQVBnRDtBQUFBLENBQWxEOztBQWlCQUQsU0FBUyxDQUFDTSxTQUFWLEdBQXNCO0FBQ3BCTCxFQUFBQSxPQUFPLEVBQUVNLHNCQUFVQyxJQUFWLENBQWVDLFVBREo7QUFFcEJQLEVBQUFBLFVBQVUsRUFBRUssc0JBQVVHLEtBQVYsQ0FBZ0IsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFoQixDQUZRO0FBR3BCUCxFQUFBQSxRQUFRLEVBQUVJLHNCQUFVSSxJQUFWLENBQWVGLFVBSEw7QUFJcEJMLEVBQUFBLFFBQVEsRUFBRUcsc0JBQVVLLE1BQVYsQ0FBaUJILFVBSlA7QUFLcEJKLEVBQUFBLE9BQU8sRUFBRUUsc0JBQVVDLElBQVYsQ0FBZUM7QUFMSixDQUF0QjtBQVFBVCxTQUFTLENBQUNhLFlBQVYsR0FBeUI7QUFDdkJYLEVBQUFBLFVBQVUsRUFBRTtBQURXLENBQXpCO2VBSWVGLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN0eWxpbmdGdW5jdGlvbiB9IGZyb20gJ3JlYWN0LWJhc2UxNi1zdHlsaW5nJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc3R5bGluZzogU3R5bGluZ0Z1bmN0aW9uO1xuICBhcnJvd1N0eWxlPzogJ3NpbmdsZScgfCAnZG91YmxlJztcbiAgZXhwYW5kZWQ6IGJvb2xlYW47XG4gIG5vZGVUeXBlOiBzdHJpbmc7XG4gIG9uQ2xpY2s6IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50Pjtcbn1cblxuY29uc3QgSlNPTkFycm93OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBzdHlsaW5nLFxuICBhcnJvd1N0eWxlLFxuICBleHBhbmRlZCxcbiAgbm9kZVR5cGUsXG4gIG9uQ2xpY2ssXG59KSA9PiAoXG4gIDxkaXYgey4uLnN0eWxpbmcoJ2Fycm93Q29udGFpbmVyJywgYXJyb3dTdHlsZSl9IG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgIDxkaXYgey4uLnN0eWxpbmcoWydhcnJvdycsICdhcnJvd1NpZ24nXSwgbm9kZVR5cGUsIGV4cGFuZGVkLCBhcnJvd1N0eWxlKX0+XG4gICAgICB7J1xcdTI1QjYnfVxuICAgICAge2Fycm93U3R5bGUgPT09ICdkb3VibGUnICYmIChcbiAgICAgICAgPGRpdiB7Li4uc3R5bGluZyhbJ2Fycm93U2lnbicsICdhcnJvd1NpZ25Jbm5lciddKX0+eydcXHUyNUI2J308L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuKTtcblxuSlNPTkFycm93LnByb3BUeXBlcyA9IHtcbiAgc3R5bGluZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgYXJyb3dTdHlsZTogUHJvcFR5cGVzLm9uZU9mKFsnc2luZ2xlJywgJ2RvdWJsZSddKSxcbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG5vZGVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5KU09OQXJyb3cuZGVmYXVsdFByb3BzID0ge1xuICBhcnJvd1N0eWxlOiAnc2luZ2xlJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEpTT05BcnJvdztcbiJdfQ==