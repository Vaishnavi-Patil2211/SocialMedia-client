"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = persistState;

var _mapValues = _interopRequireDefault(require("lodash/mapValues"));

var _identity = _interopRequireDefault(require("lodash/identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function persistState(sessionId) {
  var deserializeState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _identity["default"];
  var deserializeAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _identity["default"];

  if (!sessionId) {
    return function (next) {
      return function () {
        return next.apply(void 0, arguments);
      };
    };
  }

  function deserialize(state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      actionsById: (0, _mapValues["default"])(state.actionsById, function (liftedAction) {
        return _objectSpread(_objectSpread({}, liftedAction), {}, {
          action: deserializeAction(liftedAction.action)
        });
      }),
      committedState: deserializeState(state.committedState),
      computedStates: state.computedStates.map(function (computedState) {
        return _objectSpread(_objectSpread({}, computedState), {}, {
          state: deserializeState(computedState.state)
        });
      })
    });
  }

  return function (next) {
    return function (reducer, initialState) {
      var key = "redux-dev-session-".concat(sessionId);
      var finalInitialState;

      try {
        var json = localStorage.getItem(key);

        if (json) {
          finalInitialState = deserialize(JSON.parse(json)) || initialState;
          next(reducer, initialState);
        }
      } catch (e) {
        console.warn('Could not read debug session from localStorage:', e); // eslint-disable-line no-console

        try {
          localStorage.removeItem(key);
        } finally {
          finalInitialState = undefined;
        }
      }

      var store = next(reducer, finalInitialState);
      return _objectSpread(_objectSpread({}, store), {}, {
        dispatch: function dispatch(action) {
          store.dispatch(action);

          try {
            localStorage.setItem(key, JSON.stringify(store.getState()));
          } catch (e) {
            console.warn('Could not write debug session to localStorage:', e); // eslint-disable-line no-console
          }

          return action;
        }
      });
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wZXJzaXN0U3RhdGUudHMiXSwibmFtZXMiOlsicGVyc2lzdFN0YXRlIiwic2Vzc2lvbklkIiwiZGVzZXJpYWxpemVTdGF0ZSIsImlkZW50aXR5IiwiZGVzZXJpYWxpemVBY3Rpb24iLCJuZXh0IiwiZGVzZXJpYWxpemUiLCJzdGF0ZSIsImFjdGlvbnNCeUlkIiwibGlmdGVkQWN0aW9uIiwiYWN0aW9uIiwiY29tbWl0dGVkU3RhdGUiLCJjb21wdXRlZFN0YXRlcyIsIm1hcCIsImNvbXB1dGVkU3RhdGUiLCJyZWR1Y2VyIiwiaW5pdGlhbFN0YXRlIiwia2V5IiwiZmluYWxJbml0aWFsU3RhdGUiLCJqc29uIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImUiLCJjb25zb2xlIiwid2FybiIsInJlbW92ZUl0ZW0iLCJ1bmRlZmluZWQiLCJzdG9yZSIsImRpc3BhdGNoIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImdldFN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7QUFJZSxTQUFTQSxZQUFULENBS2JDLFNBTGEsRUFRRTtBQUFBLE1BRmZDLGdCQUVlLHVFQUZxQkMsb0JBRXJCO0FBQUEsTUFEZkMsaUJBQ2UsdUVBRHVCRCxvQkFDdkI7O0FBQ2YsTUFBSSxDQUFDRixTQUFMLEVBQWdCO0FBQ2QsV0FBTyxVQUFDSSxJQUFEO0FBQUEsYUFBVTtBQUFBLGVBQWFBLElBQUksTUFBSixtQkFBYjtBQUFBLE9BQVY7QUFBQSxLQUFQO0FBQ0Q7O0FBRUQsV0FBU0MsV0FBVCxDQUNFQyxLQURGLEVBRW1DO0FBQ2pDLDJDQUNLQSxLQURMO0FBRUVDLE1BQUFBLFdBQVcsRUFBRSwyQkFBVUQsS0FBSyxDQUFDQyxXQUFoQixFQUE2QixVQUFDQyxZQUFEO0FBQUEsK0NBQ3JDQSxZQURxQztBQUV4Q0MsVUFBQUEsTUFBTSxFQUFFTixpQkFBaUIsQ0FBQ0ssWUFBWSxDQUFDQyxNQUFkO0FBRmU7QUFBQSxPQUE3QixDQUZmO0FBTUVDLE1BQUFBLGNBQWMsRUFBRVQsZ0JBQWdCLENBQUNLLEtBQUssQ0FBQ0ksY0FBUCxDQU5sQztBQU9FQyxNQUFBQSxjQUFjLEVBQUVMLEtBQUssQ0FBQ0ssY0FBTixDQUFxQkMsR0FBckIsQ0FBeUIsVUFBQ0MsYUFBRDtBQUFBLCtDQUNwQ0EsYUFEb0M7QUFFdkNQLFVBQUFBLEtBQUssRUFBRUwsZ0JBQWdCLENBQUNZLGFBQWEsQ0FBQ1AsS0FBZjtBQUZnQjtBQUFBLE9BQXpCO0FBUGxCO0FBWUQ7O0FBRUQsU0FBTyxVQUFDRixJQUFEO0FBQUEsV0FBVSxVQUNmVSxPQURlLEVBRWZDLFlBRmUsRUFHWjtBQUNILFVBQU1DLEdBQUcsK0JBQXdCaEIsU0FBeEIsQ0FBVDtBQUVBLFVBQUlpQixpQkFBSjs7QUFDQSxVQUFJO0FBQ0YsWUFBTUMsSUFBSSxHQUFHQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUJKLEdBQXJCLENBQWI7O0FBQ0EsWUFBSUUsSUFBSixFQUFVO0FBQ1JELFVBQUFBLGlCQUFpQixHQUFHWixXQUFXLENBQUNnQixJQUFJLENBQUNDLEtBQUwsQ0FBV0osSUFBWCxDQUFELENBQVgsSUFBaUNILFlBQXJEO0FBQ0FYLFVBQUFBLElBQUksQ0FBQ1UsT0FBRCxFQUFVQyxZQUFWLENBQUo7QUFDRDtBQUNGLE9BTkQsQ0FNRSxPQUFPUSxDQUFQLEVBQVU7QUFDVkMsUUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsaURBQWIsRUFBZ0VGLENBQWhFLEVBRFUsQ0FDMEQ7O0FBQ3BFLFlBQUk7QUFDRkosVUFBQUEsWUFBWSxDQUFDTyxVQUFiLENBQXdCVixHQUF4QjtBQUNELFNBRkQsU0FFVTtBQUNSQyxVQUFBQSxpQkFBaUIsR0FBR1UsU0FBcEI7QUFDRDtBQUNGOztBQUVELFVBQU1DLEtBQUssR0FBR3hCLElBQUksQ0FDaEJVLE9BRGdCLEVBRWhCRyxpQkFGZ0IsQ0FBbEI7QUFLQSw2Q0FDS1csS0FETDtBQUVFQyxRQUFBQSxRQUZGLG9CQUV3QnBCLE1BRnhCLEVBRW1DO0FBQy9CbUIsVUFBQUEsS0FBSyxDQUFDQyxRQUFOLENBQWVwQixNQUFmOztBQUVBLGNBQUk7QUFDRlUsWUFBQUEsWUFBWSxDQUFDVyxPQUFiLENBQXFCZCxHQUFyQixFQUEwQkssSUFBSSxDQUFDVSxTQUFMLENBQWVILEtBQUssQ0FBQ0ksUUFBTixFQUFmLENBQTFCO0FBQ0QsV0FGRCxDQUVFLE9BQU9ULENBQVAsRUFBVTtBQUNWQyxZQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxnREFBYixFQUErREYsQ0FBL0QsRUFEVSxDQUN5RDtBQUNwRTs7QUFFRCxpQkFBT2QsTUFBUDtBQUNEO0FBWkg7QUFjRCxLQXpDTTtBQUFBLEdBQVA7QUEwQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFwVmFsdWVzIGZyb20gJ2xvZGFzaC9tYXBWYWx1ZXMnO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJ2xvZGFzaC9pZGVudGl0eSc7XG5pbXBvcnQgeyBBY3Rpb24sIFByZWxvYWRlZFN0YXRlLCBSZWR1Y2VyLCBTdG9yZUVuaGFuY2VyIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgTGlmdGVkU3RhdGUgfSBmcm9tICdAcmVkdXgtZGV2dG9vbHMvaW5zdHJ1bWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBlcnNpc3RTdGF0ZTxcbiAgUyxcbiAgQSBleHRlbmRzIEFjdGlvbjx1bmtub3duPixcbiAgTW9uaXRvclN0YXRlXG4+KFxuICBzZXNzaW9uSWQ/OiBzdHJpbmcgfCBudWxsLFxuICBkZXNlcmlhbGl6ZVN0YXRlOiAoc3RhdGU6IFMpID0+IFMgPSBpZGVudGl0eSxcbiAgZGVzZXJpYWxpemVBY3Rpb246IChhY3Rpb246IEEpID0+IEEgPSBpZGVudGl0eVxuKTogU3RvcmVFbmhhbmNlciB7XG4gIGlmICghc2Vzc2lvbklkKSB7XG4gICAgcmV0dXJuIChuZXh0KSA9PiAoLi4uYXJncykgPT4gbmV4dCguLi5hcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc2VyaWFsaXplKFxuICAgIHN0YXRlOiBMaWZ0ZWRTdGF0ZTxTLCBBLCBNb25pdG9yU3RhdGU+XG4gICk6IExpZnRlZFN0YXRlPFMsIEEsIE1vbml0b3JTdGF0ZT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIGFjdGlvbnNCeUlkOiBtYXBWYWx1ZXMoc3RhdGUuYWN0aW9uc0J5SWQsIChsaWZ0ZWRBY3Rpb24pID0+ICh7XG4gICAgICAgIC4uLmxpZnRlZEFjdGlvbixcbiAgICAgICAgYWN0aW9uOiBkZXNlcmlhbGl6ZUFjdGlvbihsaWZ0ZWRBY3Rpb24uYWN0aW9uKSxcbiAgICAgIH0pKSxcbiAgICAgIGNvbW1pdHRlZFN0YXRlOiBkZXNlcmlhbGl6ZVN0YXRlKHN0YXRlLmNvbW1pdHRlZFN0YXRlKSxcbiAgICAgIGNvbXB1dGVkU3RhdGVzOiBzdGF0ZS5jb21wdXRlZFN0YXRlcy5tYXAoKGNvbXB1dGVkU3RhdGUpID0+ICh7XG4gICAgICAgIC4uLmNvbXB1dGVkU3RhdGUsXG4gICAgICAgIHN0YXRlOiBkZXNlcmlhbGl6ZVN0YXRlKGNvbXB1dGVkU3RhdGUuc3RhdGUpLFxuICAgICAgfSkpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gKG5leHQpID0+IDxTLCBBIGV4dGVuZHMgQWN0aW9uPHVua25vd24+PihcbiAgICByZWR1Y2VyOiBSZWR1Y2VyPFMsIEE+LFxuICAgIGluaXRpYWxTdGF0ZT86IFByZWxvYWRlZFN0YXRlPFM+XG4gICkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGByZWR1eC1kZXYtc2Vzc2lvbi0ke3Nlc3Npb25JZH1gO1xuXG4gICAgbGV0IGZpbmFsSW5pdGlhbFN0YXRlO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBqc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChqc29uKSB7XG4gICAgICAgIGZpbmFsSW5pdGlhbFN0YXRlID0gZGVzZXJpYWxpemUoSlNPTi5wYXJzZShqc29uKSkgfHwgaW5pdGlhbFN0YXRlO1xuICAgICAgICBuZXh0KHJlZHVjZXIsIGluaXRpYWxTdGF0ZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgcmVhZCBkZWJ1ZyBzZXNzaW9uIGZyb20gbG9jYWxTdG9yYWdlOicsIGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBmaW5hbEluaXRpYWxTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZSA9IG5leHQoXG4gICAgICByZWR1Y2VyLFxuICAgICAgZmluYWxJbml0aWFsU3RhdGUgYXMgUHJlbG9hZGVkU3RhdGU8Uz4gfCB1bmRlZmluZWRcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN0b3JlLFxuICAgICAgZGlzcGF0Y2g8VCBleHRlbmRzIEE+KGFjdGlvbjogVCkge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaChhY3Rpb24pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShzdG9yZS5nZXRTdGF0ZSgpKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCB3cml0ZSBkZWJ1ZyBzZXNzaW9uIHRvIGxvY2FsU3RvcmFnZTonLCBlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgICAgfSxcbiAgICB9O1xuICB9O1xufVxuIl19