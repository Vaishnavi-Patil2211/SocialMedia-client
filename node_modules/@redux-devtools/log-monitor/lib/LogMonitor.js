"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var themes = _interopRequireWildcard(require("redux-devtools-themes"));

var _core = require("@redux-devtools/core");

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _actions = require("./actions");

var _reducers = _interopRequireDefault(require("./reducers"));

var _LogMonitorButtonBar = _interopRequireDefault(require("./LogMonitorButtonBar"));

var _LogMonitorEntryList = _interopRequireDefault(require("./LogMonitorEntryList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line @typescript-eslint/unbound-method
var toggleAction = _core.ActionCreators.toggleAction,
    setActionsActive = _core.ActionCreators.setActionsActive;
var styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300,
    direction: 'ltr'
  },
  elements: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    overflowX: 'hidden',
    overflowY: 'auto'
  }
};

var LogMonitor = /*#__PURE__*/function (_PureComponent) {
  _inherits(LogMonitor, _PureComponent);

  var _super = _createSuper(LogMonitor);

  function LogMonitor() {
    var _this;

    _classCallCheck(this, LogMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "scrollDown", void 0);

    _defineProperty(_assertThisInitialized(_this), "node", void 0);

    _defineProperty(_assertThisInitialized(_this), "updateScrollTop", (0, _lodash["default"])(function () {
      var node = _this.node;

      _this.props.dispatch((0, _actions.updateScrollTop)(node ? node.scrollTop : 0));
    }, 500));

    _defineProperty(_assertThisInitialized(_this), "handleToggleAction", function (id) {
      _this.props.dispatch(toggleAction(id));
    });

    _defineProperty(_assertThisInitialized(_this), "handleToggleConsecutiveAction", function (id) {
      var _this$props = _this.props,
          monitorState = _this$props.monitorState,
          actionsById = _this$props.actionsById;
      var consecutiveToggleStartId = monitorState.consecutiveToggleStartId;

      if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {
        var skippedActionIds = _this.props.skippedActionIds;
        var start = Math.min(consecutiveToggleStartId, id);
        var end = Math.max(consecutiveToggleStartId, id);
        var active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;

        _this.props.dispatch(setActionsActive(start, end + 1, active));

        _this.props.dispatch((0, _actions.startConsecutiveToggle)(null));
      } else if (id > 0) {
        _this.props.dispatch((0, _actions.startConsecutiveToggle)(id));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getRef", function (node) {
      _this.node = node;
    });

    return _this;
  }

  _createClass(LogMonitor, [{
    key: "scroll",
    value: function scroll() {
      var node = this.node;

      if (!node) {
        return;
      }

      if (this.scrollDown) {
        var offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        node.scrollTop = scrollHeight - offsetHeight;
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var node = this.node;

      if (!node || !this.props.monitorState) {
        return;
      }

      if (this.props.preserveScrollTop) {
        node.scrollTop = this.props.monitorState.initialScrollTop;
        node.addEventListener('scroll', this.updateScrollTop);
      } else {
        this.scrollDown = true;
        this.scroll();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var node = this.node;

      if (node && this.props.preserveScrollTop) {
        node.removeEventListener('scroll', this.updateScrollTop);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var node = this.node;

      if (!node) {
        this.scrollDown = true;
      } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
        var scrollTop = node.scrollTop,
            offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
      } else {
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.scroll();
    }
  }, {
    key: "getTheme",
    value: function getTheme() {
      var theme = this.props.theme;

      if (typeof theme !== 'string') {
        return theme;
      }

      if (typeof themes[theme] !== 'undefined') {
        return themes[theme];
      } // eslint-disable-next-line no-console


      console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
      return themes.nicinabox;
    }
  }, {
    key: "render",
    value: function render() {
      var theme = this.getTheme();
      var consecutiveToggleStartId = this.props.monitorState.consecutiveToggleStartId;
      var _this$props2 = this.props,
          dispatch = _this$props2.dispatch,
          actionsById = _this$props2.actionsById,
          skippedActionIds = _this$props2.skippedActionIds,
          stagedActionIds = _this$props2.stagedActionIds,
          computedStates = _this$props2.computedStates,
          currentStateIndex = _this$props2.currentStateIndex,
          select = _this$props2.select,
          expandActionRoot = _this$props2.expandActionRoot,
          expandStateRoot = _this$props2.expandStateRoot,
          markStateDiff = _this$props2.markStateDiff;
      var entryListProps = {
        theme: theme,
        actionsById: actionsById,
        skippedActionIds: skippedActionIds,
        stagedActionIds: stagedActionIds,
        computedStates: computedStates,
        currentStateIndex: currentStateIndex,
        consecutiveToggleStartId: consecutiveToggleStartId,
        select: select,
        expandActionRoot: expandActionRoot,
        expandStateRoot: expandStateRoot,
        markStateDiff: markStateDiff,
        onActionClick: this.handleToggleAction,
        onActionShiftClick: this.handleToggleConsecutiveAction
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: _objectSpread(_objectSpread({}, styles.container), {}, {
          backgroundColor: theme.base00
        })
      }, !this.props.hideMainButtons && /*#__PURE__*/_react["default"].createElement(_LogMonitorButtonBar["default"], {
        theme: theme,
        dispatch: dispatch,
        hasStates: computedStates.length > 1,
        hasSkippedActions: skippedActionIds.length > 0
      }), /*#__PURE__*/_react["default"].createElement("div", {
        style: this.props.hideMainButtons ? styles.elements : _objectSpread(_objectSpread({}, styles.elements), {}, {
          top: 30
        }),
        ref: this.getRef
      }, /*#__PURE__*/_react["default"].createElement(_LogMonitorEntryList["default"], entryListProps)));
    }
  }]);

  return LogMonitor;
}(_react.PureComponent);

_defineProperty(LogMonitor, "update", _reducers["default"]);

_defineProperty(LogMonitor, "propTypes", {
  dispatch: _propTypes["default"].func,
  computedStates: _propTypes["default"].array,
  actionsById: _propTypes["default"].object,
  stagedActionIds: _propTypes["default"].array,
  skippedActionIds: _propTypes["default"].array,
  monitorState: _propTypes["default"].shape({
    initialScrollTop: _propTypes["default"].number,
    consecutiveToggleStartId: _propTypes["default"].number
  }),
  preserveScrollTop: _propTypes["default"].bool,
  select: _propTypes["default"].func,
  theme: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].string]),
  expandActionRoot: _propTypes["default"].bool,
  expandStateRoot: _propTypes["default"].bool,
  markStateDiff: _propTypes["default"].bool,
  hideMainButtons: _propTypes["default"].bool
});

_defineProperty(LogMonitor, "defaultProps", {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  expandActionRoot: true,
  expandStateRoot: true,
  markStateDiff: false
});

var _default = LogMonitor;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,