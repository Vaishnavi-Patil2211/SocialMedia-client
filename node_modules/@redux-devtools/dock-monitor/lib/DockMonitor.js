"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDock = _interopRequireDefault(require("react-dock"));

var _constants = require("./constants");

var _actions = require("./actions");

var _reducers = _interopRequireDefault(require("./reducers"));

var _parseKey = _interopRequireDefault(require("parse-key"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DockMonitor = /*#__PURE__*/function (_Component) {
  _inherits(DockMonitor, _Component);

  var _super = _createSuper(DockMonitor);

  function DockMonitor(props) {
    var _this;

    _classCallCheck(this, DockMonitor);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      // Ignore regular keys when focused on a field
      // and no modifiers are active.
      if (!e.ctrlKey && !e.metaKey && !e.altKey && (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA' || e.target.isContentEditable)) {
        return;
      }

      var visibilityKey = (0, _parseKey["default"])(_this.props.toggleVisibilityKey);
      var positionKey = (0, _parseKey["default"])(_this.props.changePositionKey);
      var monitorKey;

      if (_this.props.changeMonitorKey) {
        monitorKey = (0, _parseKey["default"])(_this.props.changeMonitorKey);
      }

      if (_this.matchesKey(visibilityKey, e)) {
        e.preventDefault();

        _this.props.dispatch((0, _actions.toggleVisibility)());
      } else if (_this.matchesKey(positionKey, e)) {
        e.preventDefault();

        _this.props.dispatch((0, _actions.changePosition)());
      } else if (_this.matchesKey(monitorKey, e)) {
        e.preventDefault();

        _this.props.dispatch((0, _actions.changeMonitor)());
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSizeChange", function (requestedSize) {
      _this.props.dispatch((0, _actions.changeSize)(requestedSize));
    });

    var childrenCount = _react.Children.count(props.children);

    if (childrenCount === 0) {
      // eslint-disable-next-line no-console
      console.error('<DockMonitor> requires at least one monitor inside. ' + 'Why donâ€™t you try <LogMonitor>? You can get it at ' + 'https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools-log-monitor.');
    } else if (childrenCount > 1 && !props.changeMonitorKey) {
      // eslint-disable-next-line no-console
      console.error('You specified multiple monitors inside <DockMonitor> ' + 'but did not provide `changeMonitorKey` prop to change them. ' + 'Try specifying <DockMonitor changeMonitorKey="ctrl-m" /> ' + 'and then press Ctrl-M.');
    }

    return _this;
  }

  _createClass(DockMonitor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "matchesKey",
    value: function matchesKey(key, event) {
      if (!key) {
        return false;
      }

      var charCode = event.keyCode || event.which;

      var _char = String.fromCharCode(charCode);

      return key.name.toUpperCase() === _char.toUpperCase() && key.alt === event.altKey && key.ctrl === event.ctrlKey && key.meta === event.metaKey && key.shift === event.shiftKey;
    }
  }, {
    key: "renderChild",
    value: function renderChild(child, index, otherProps) {
      var monitorState = this.props.monitorState;
      var childMonitorIndex = monitorState.childMonitorIndex,
          childMonitorStates = monitorState.childMonitorStates;

      if (index !== childMonitorIndex) {
        return null;
      }

      return /*#__PURE__*/(0, _react.cloneElement)(child, _objectSpread({
        monitorState: childMonitorStates[index]
      }, otherProps));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          monitorState = _this$props.monitorState,
          children = _this$props.children,
          fluid = _this$props.fluid,
          rest = _objectWithoutProperties(_this$props, ["monitorState", "children", "fluid"]);

      var position = monitorState.position,
          isVisible = monitorState.isVisible,
          size = monitorState.size;
      return /*#__PURE__*/_react["default"].createElement(_reactDock["default"], {
        position: position,
        isVisible: isVisible,
        size: size,
        fluid: fluid,
        onSizeChange: this.handleSizeChange,
        dimMode: "none"
      }, _react.Children.map(children, function (child, index) {
        return _this2.renderChild(child, index, rest);
      }));
    }
  }]);

  return DockMonitor;
}(_react.Component);

_defineProperty(DockMonitor, "update", _reducers["default"]);

_defineProperty(DockMonitor, "propTypes", {
  defaultPosition: _propTypes["default"].oneOf(_constants.POSITIONS),
  defaultIsVisible: _propTypes["default"].bool.isRequired,
  defaultSize: _propTypes["default"].number.isRequired,
  toggleVisibilityKey: _propTypes["default"].string.isRequired,
  changePositionKey: _propTypes["default"].string.isRequired,
  changeMonitorKey: _propTypes["default"].string,
  fluid: _propTypes["default"].bool,
  dispatch: _propTypes["default"].func,
  monitorState: _propTypes["default"].shape({
    position: _propTypes["default"].oneOf(_constants.POSITIONS).isRequired,
    size: _propTypes["default"].number.isRequired,
    isVisible: _propTypes["default"].bool.isRequired,
    childMonitorState: _propTypes["default"].any
  })
});

_defineProperty(DockMonitor, "defaultProps", {
  defaultIsVisible: true,
  defaultPosition: 'right',
  defaultSize: 0.3,
  fluid: true
});

var _default = DockMonitor;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,